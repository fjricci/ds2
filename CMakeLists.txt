##
## Copyright (c) 2014, Facebook, Inc.
## All rights reserved.
##
## This source code is licensed under the University of Illinois/NCSA Open
## Source License found in the LICENSE file in the root directory of this
## source tree. An additional grant of patent rights can be found in the
## PATENTS file in the same directory.
##

cmake_minimum_required(VERSION 2.8)
if ("${CMAKE_VERSION}" VERSION_GREATER "3.1.0")
  cmake_policy(SET CMP0054 NEW)
endif ()

project(DebugServer2)

set(OS_NAME ${CMAKE_SYSTEM_NAME})
set(ARCH_NAME ${CMAKE_SYSTEM_PROCESSOR})

string(STRIP "${ARCH_NAME}" ARCH_NAME)
string(TOUPPER "${ARCH_NAME}" ARCH_NAME)
if (ARCH_NAME MATCHES "^ARM64" OR ARCH_NAME MATCHES "AARCH64")
  set(ARCH_NAME "ARM64")
elseif (ARCH_NAME MATCHES "^ARM")
  set(ARCH_NAME "ARM") # Normalize ARMHF -> ARM
elseif (ARCH_NAME MATCHES "I386")
  set(ARCH_NAME "X86")
elseif (ARCH_NAME MATCHES "AMD64")
  set(ARCH_NAME "X86_64")
endif ()

if (MSVC)
  if ("${CMAKE_GENERATOR}" MATCHES "ARM")
    set(ARCH_NAME "ARM")
  elseif ("${CMAKE_GENERATOR}" MATCHES "Win64")
    set(ARCH_NAME "X86_64")
  else ()
    set(ARCH_NAME "X86")
  endif ()
endif ()

set(ARCHITECTURE_COMMON_SOURCES
    Sources/Architecture/RegisterLayout.cpp
    )

set(ARCHITECTURE_ARM_SOURCES
    Sources/Architecture/ARM/ARMBranchInfo.cpp
    Sources/Architecture/ARM/ThumbBranchInfo.cpp
    Sources/Architecture/ARM/SoftwareBreakpointManager.cpp
    Sources/Architecture/ARM/RegistersDescriptors.cpp
    )

set(ARCHITECTURE_ARM64_SOURCES
    ${ARCHITECTURE_ARM_SOURCES}
    Sources/Architecture/ARM64/RegistersDescriptors.cpp
    )

set(ARCHITECTURE_X86_SOURCES
    Sources/Architecture/X86/SoftwareBreakpointManager.cpp
    Sources/Architecture/X86/RegistersDescriptors.cpp
    )

set(ARCHITECTURE_X86_64_SOURCES
    ${ARCHITECTURE_X86_SOURCES}
    Sources/Architecture/X86_64/RegistersDescriptors.cpp
    )

set(HOST_COMMON_SOURCES
    Sources/Host/Common/Channel.cpp
    Sources/Host/Common/QueueChannel.cpp
    Sources/Host/Common/Socket.cpp
    )

set(HOST_POSIX_SOURCES
    Sources/Host/POSIX/Platform.cpp
    Sources/Host/POSIX/PTrace.cpp
    Sources/Host/POSIX/AsyncProcessWaiter.cpp
    Sources/Host/POSIX/ProcessSpawner.cpp
    )

set(HOST_Linux_SOURCES
    ${HOST_POSIX_SOURCES}
    Sources/Host/Linux/ProcFS.cpp
    Sources/Host/Linux/Platform.cpp
    Sources/Host/Linux/PTrace.cpp
    Sources/Host/Linux/${ARCH_NAME}/PTrace${ARCH_NAME}.cpp
    )

set(HOST_FreeBSD_SOURCES
    ${HOST_POSIX_SOURCES}
    Sources/Host/FreeBSD/ProcStat.cpp
    Sources/Host/FreeBSD/Platform.cpp
    Sources/Host/FreeBSD/PTrace.cpp
    Sources/Host/FreeBSD/${ARCH_NAME}/PTrace${ARCH_NAME}.cpp
    )

set(HOST_Windows_SOURCES
    Sources/Host/Windows/Platform.cpp
    Sources/Host/Windows/ProcessSpawner.cpp
    )

set(TARGET_COMMON_SOURCES
    Sources/Target/ProcessBase.cpp
    Sources/Target/ThreadBase.cpp
    )

set(TARGET_POSIX_SOURCES
    Sources/Target/POSIX/ELFProcess.cpp
    Sources/Target/POSIX/Process.cpp
    Sources/Target/POSIX/Thread.cpp
    )

set(TARGET_Linux_SOURCES
    ${TARGET_POSIX_SOURCES}
    Sources/Target/Linux/${ARCH_NAME}/Process${ARCH_NAME}.cpp
    Sources/Target/Linux/${ARCH_NAME}/Thread${ARCH_NAME}.cpp
    Sources/Target/Linux/Process.cpp
    Sources/Target/Linux/Thread.cpp
    )

set(TARGET_FreeBSD_SOURCES
    ${TARGET_POSIX_SOURCES}
    Sources/Target/FreeBSD/Process.cpp
    Sources/Target/FreeBSD/${ARCH_NAME}/Thread${ARCH_NAME}.cpp
    Sources/Target/FreeBSD/${ARCH_NAME}/Process${ARCH_NAME}.cpp
    Sources/Target/FreeBSD/Thread.cpp
    )

set(TARGET_Windows_SOURCES
    Sources/Target/Windows/${ARCH_NAME}/Process${ARCH_NAME}.cpp
    Sources/Target/Windows/${ARCH_NAME}/Thread${ARCH_NAME}.cpp
    Sources/Target/Windows/Process.cpp
    Sources/Target/Windows/Thread.cpp
    )

set(GDB_SOURCES
    Sources/GDB/ByteCodeInterpreter.cpp
    )

set(GDBREMOTE_SOURCES
    Sources/GDBRemote/Structures.cpp
    Sources/GDBRemote/PacketProcessor.cpp
    Sources/GDBRemote/ProtocolInterpreter.cpp
    Sources/GDBRemote/ProtocolHelpers.cpp

    Sources/GDBRemote/SessionBase.cpp
    Sources/GDBRemote/Session.cpp

    Sources/GDBRemote/DummySessionDelegateImpl.cpp
    Sources/GDBRemote/PlatformSessionImpl.cpp
    Sources/GDBRemote/DebugSessionImpl.cpp
    Sources/GDBRemote/SlaveSessionImpl.cpp
    )

set(SUPPORT_COMMON_SOURCES
    Sources/BreakpointManager.cpp
    Sources/CPUTypes.cpp
    Sources/ErrorCodes.cpp
    Sources/MessageQueue.cpp
    Sources/Utils/Log.cpp
    Sources/Utils/OptParse.cpp
    Tools/RegsGen2/JSObjects.cpp
    )

set(SUPPORT_POSIX_SOURCES
    Sources/Support/POSIX/ELFSupport.cpp
    Sources/Support/POSIX/FaultHandler.cpp
    Sources/Support/POSIX/Stringify.cpp
    )

set(SUPPORT_Linux_SOURCES
    ${SUPPORT_POSIX_SOURCES}
    )

set(SUPPORT_FreeBSD_SOURCES
    ${SUPPORT_POSIX_SOURCES}
    )

set(SUPPORT_Windows_SOURCES
    Sources/Support/Windows/Stringify.cpp
    )

set(HOST_SOURCES ${HOST_COMMON_SOURCES} ${HOST_${OS_NAME}_SOURCES})
set(TARGET_SOURCES ${TARGET_COMMON_SOURCES} ${TARGET_${OS_NAME}_SOURCES})
set(ARCHITECTURE_SOURCES ${ARCHITECTURE_COMMON_SOURCES} ${ARCHITECTURE_${ARCH_NAME}_SOURCES})
set(SUPPORT_SOURCES ${SUPPORT_COMMON_SOURCES} ${SUPPORT_${OS_NAME}_SOURCES})

set(DEBUGSERVER2_SOURCES
    ${HOST_SOURCES}
    ${TARGET_SOURCES}
    ${ARCHITECTURE_SOURCES}
    ${SUPPORT_SOURCES}
    ${GDB_SOURCES}
    ${GDBREMOTE_SOURCES}
    Main/main.cpp
    Main/SessionThread.cpp
    )

add_executable(ds2 ${DEBUGSERVER2_SOURCES})

include_directories(Headers)
include_directories(Main)
include_directories(Tools)
include_directories(Tools/RegsGen2/libjson)

if (MSVC)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W3 /DSTRICT /wd4244 /wd4996")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /DWIN32_LEAN_AND_MEAN /DNOMINMAX")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
else ()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wextra -Wno-unused-parameter")

  if (STATIC)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static")
  endif ()

  if (PIE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpie")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pie")
  endif ()

  if ("${ARCH_NAME}" STREQUAL "X86")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32")
  endif ()

  if (WIN32)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWIN32_LEAN_AND_MEAN -DNOMINMAX -DCINTERFACE")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-missing-braces -Wno-missing-field-initializers -Wno-tautological-compare")
  endif ()

  if (${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
    target_link_libraries(ds2 util procstat)
  endif ()

  include(CheckFunctionExists)
  foreach (FUNC gettid personality posix_openpt wait4)
    string(TOUPPER "${FUNC}" UCFUNC)
    CHECK_FUNCTION_EXISTS(${FUNC} HAVE_${UCFUNC})
    if (HAVE_${UCFUNC})
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DHAVE_${UCFUNC}")
    endif ()
  endforeach ()

  include(CheckIncludeFile)
  CHECK_INCLUDE_FILE(sys/personality.h HAVE_SYS_PERSONALITY_H)
  if (HAVE_SYS_PERSONALITY_H)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DHAVE_SYS_PERSONALITY_H")
  endif ()
endif ()

if (WIN32)
  target_link_libraries(ds2 psapi shlwapi ws2_32)
endif ()

include(FindThreads)
target_link_libraries(ds2 ${CMAKE_THREAD_LIBS_INIT})
